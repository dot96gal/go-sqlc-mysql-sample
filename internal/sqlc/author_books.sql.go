// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: author_books.sql

package sqlc

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createAuthorBook = `-- name: CreateAuthorBook :exec
INSERT INTO
  author_books (author_uuid, book_uuid)
VALUES
  (?, ?)
`

type CreateAuthorBookParams struct {
	AuthorUuid uuid.UUID
	BookUuid   uuid.UUID
}

func (q *Queries) CreateAuthorBook(ctx context.Context, arg CreateAuthorBookParams) error {
	_, err := q.db.ExecContext(ctx, createAuthorBook, arg.AuthorUuid, arg.BookUuid)
	return err
}

const deleteAuthorBook = `-- name: DeleteAuthorBook :exec
DELETE FROM author_books
WHERE
  author_uuid = ?
  AND book_uuid = ?
`

type DeleteAuthorBookParams struct {
	AuthorUuid uuid.UUID
	BookUuid   uuid.UUID
}

func (q *Queries) DeleteAuthorBook(ctx context.Context, arg DeleteAuthorBookParams) error {
	_, err := q.db.ExecContext(ctx, deleteAuthorBook, arg.AuthorUuid, arg.BookUuid)
	return err
}

const getAuthorBook = `-- name: GetAuthorBook :one
SELECT
  author_uuid, book_uuid
FROM
  author_books
WHERE
  author_uuid = ?
  AND book_uuid = ?
LIMIT
  1
`

type GetAuthorBookParams struct {
	AuthorUuid uuid.UUID
	BookUuid   uuid.UUID
}

func (q *Queries) GetAuthorBook(ctx context.Context, arg GetAuthorBookParams) (AuthorBook, error) {
	row := q.db.QueryRowContext(ctx, getAuthorBook, arg.AuthorUuid, arg.BookUuid)
	var i AuthorBook
	err := row.Scan(&i.AuthorUuid, &i.BookUuid)
	return i, err
}

const listAuthorBooks = `-- name: ListAuthorBooks :many
SELECT
  a.uuid AS author_uuid,
  a.name AS author_name,
  a.bio AS author_bio,
  b.uuid AS book_uuid,
  b.title AS book_title
FROM
  authors AS a
  INNER JOIN author_books AS ab ON a.uuid = ab.author_uuid
  INNER JOIN books AS b ON ab.book_uuid = b.uuid
ORDER BY
  a.uuid,
  b.uuid
`

type ListAuthorBooksRow struct {
	AuthorUuid uuid.UUID
	AuthorName string
	AuthorBio  sql.NullString
	BookUuid   uuid.UUID
	BookTitle  string
}

func (q *Queries) ListAuthorBooks(ctx context.Context) ([]ListAuthorBooksRow, error) {
	rows, err := q.db.QueryContext(ctx, listAuthorBooks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListAuthorBooksRow
	for rows.Next() {
		var i ListAuthorBooksRow
		if err := rows.Scan(
			&i.AuthorUuid,
			&i.AuthorName,
			&i.AuthorBio,
			&i.BookUuid,
			&i.BookTitle,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
