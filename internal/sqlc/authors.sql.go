// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: authors.sql

package sqlc

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createAuthor = `-- name: CreateAuthor :exec
INSERT INTO
  authors (uuid, name, bio)
VALUES
  (?, ?, ?)
`

type CreateAuthorParams struct {
	Uuid uuid.UUID
	Name string
	Bio  sql.NullString
}

func (q *Queries) CreateAuthor(ctx context.Context, arg CreateAuthorParams) error {
	_, err := q.db.ExecContext(ctx, createAuthor, arg.Uuid, arg.Name, arg.Bio)
	return err
}

const deleteAuthor = `-- name: DeleteAuthor :exec
DELETE FROM authors
WHERE
  uuid = ?
`

func (q *Queries) DeleteAuthor(ctx context.Context, argUuid uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteAuthor, argUuid)
	return err
}

const getAuthor = `-- name: GetAuthor :one
SELECT
  uuid, name, bio
FROM
  authors
WHERE
  uuid = ?
LIMIT
  1
`

func (q *Queries) GetAuthor(ctx context.Context, argUuid uuid.UUID) (Author, error) {
	row := q.db.QueryRowContext(ctx, getAuthor, argUuid)
	var i Author
	err := row.Scan(&i.Uuid, &i.Name, &i.Bio)
	return i, err
}

const listAuthors = `-- name: ListAuthors :many
SELECT
  uuid, name, bio
FROM
  authors
ORDER BY
  uuid
`

func (q *Queries) ListAuthors(ctx context.Context) ([]Author, error) {
	rows, err := q.db.QueryContext(ctx, listAuthors)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Author
	for rows.Next() {
		var i Author
		if err := rows.Scan(&i.Uuid, &i.Name, &i.Bio); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAuthor = `-- name: UpdateAuthor :exec
UPDATE authors
SET
  name = ?,
  bio = ?
WHERE
  uuid = ?
`

type UpdateAuthorParams struct {
	Name string
	Bio  sql.NullString
	Uuid uuid.UUID
}

func (q *Queries) UpdateAuthor(ctx context.Context, arg UpdateAuthorParams) error {
	_, err := q.db.ExecContext(ctx, updateAuthor, arg.Name, arg.Bio, arg.Uuid)
	return err
}
