// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: books.sql

package sqlc

import (
	"context"
	"database/sql"
)

const createBook = `-- name: CreateBook :execresult
INSERT INTO books (
  title,
  publisher_id
) VALUES (
  ?, ?
)
`

type CreateBookParams struct {
	Title       string
	PublisherID int64
}

func (q *Queries) CreateBook(ctx context.Context, arg CreateBookParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createBook, arg.Title, arg.PublisherID)
}

const deleteBook = `-- name: DeleteBook :exec
DELETE FROM books
WHERE id = ?
`

func (q *Queries) DeleteBook(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteBook, id)
	return err
}

const getBook = `-- name: GetBook :one
SELECT id, title, publisher_id FROM books 
WHERE id = ? LIMIT 1
`

func (q *Queries) GetBook(ctx context.Context, id int64) (Book, error) {
	row := q.db.QueryRowContext(ctx, getBook, id)
	var i Book
	err := row.Scan(&i.ID, &i.Title, &i.PublisherID)
	return i, err
}

const getBookPublisher = `-- name: GetBookPublisher :one
SELECT
  b.id AS book_id,
  b.title AS book_title,
  p.id AS publisher_id,
  p.name AS publisher_name
FROM books AS b
INNER JOIN publishers AS p
ON b.publisher_id = p.id
WHERE b.id = ? LIMIT 1
`

type GetBookPublisherRow struct {
	BookID        int64
	BookTitle     string
	PublisherID   int64
	PublisherName string
}

func (q *Queries) GetBookPublisher(ctx context.Context, id int64) (GetBookPublisherRow, error) {
	row := q.db.QueryRowContext(ctx, getBookPublisher, id)
	var i GetBookPublisherRow
	err := row.Scan(
		&i.BookID,
		&i.BookTitle,
		&i.PublisherID,
		&i.PublisherName,
	)
	return i, err
}

const listBooks = `-- name: ListBooks :many
SELECT id, title, publisher_id FROM books
ORDER BY id
`

func (q *Queries) ListBooks(ctx context.Context) ([]Book, error) {
	rows, err := q.db.QueryContext(ctx, listBooks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Book
	for rows.Next() {
		var i Book
		if err := rows.Scan(&i.ID, &i.Title, &i.PublisherID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateBook = `-- name: UpdateBook :exec
UPDATE books
SET title = ?
WHERE id = ?
`

type UpdateBookParams struct {
	Title string
	ID    int64
}

func (q *Queries) UpdateBook(ctx context.Context, arg UpdateBookParams) error {
	_, err := q.db.ExecContext(ctx, updateBook, arg.Title, arg.ID)
	return err
}
