// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: publishers.sql

package sqlc

import (
	"context"
	"database/sql"
)

const createPublisher = `-- name: CreatePublisher :execresult
INSERT INTO publishers (
  name
) VALUES (
  ?
)
`

func (q *Queries) CreatePublisher(ctx context.Context, name string) (sql.Result, error) {
	return q.db.ExecContext(ctx, createPublisher, name)
}

const deletePublisher = `-- name: DeletePublisher :exec
DELETE FROM publishers
WHERE id = ?
`

func (q *Queries) DeletePublisher(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deletePublisher, id)
	return err
}

const getPublisher = `-- name: GetPublisher :one
SELECT id, name FROM publishers
WHERE id = ? LIMIT 1
`

func (q *Queries) GetPublisher(ctx context.Context, id int64) (Publisher, error) {
	row := q.db.QueryRowContext(ctx, getPublisher, id)
	var i Publisher
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const listPublishers = `-- name: ListPublishers :many
SELECT id, name FROM publishers
ORDER BY id
`

func (q *Queries) ListPublishers(ctx context.Context) ([]Publisher, error) {
	rows, err := q.db.QueryContext(ctx, listPublishers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Publisher
	for rows.Next() {
		var i Publisher
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePublisher = `-- name: UpdatePublisher :exec
UPDATE publishers
SET name = ?
WHERE id = ?
`

type UpdatePublisherParams struct {
	Name string
	ID   int64
}

func (q *Queries) UpdatePublisher(ctx context.Context, arg UpdatePublisherParams) error {
	_, err := q.db.ExecContext(ctx, updatePublisher, arg.Name, arg.ID)
	return err
}
